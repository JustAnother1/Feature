<?xml version="1.0" encoding="utf-8" ?>
<build_cfg>
  <required>
    <variables>
      <CC>arm-none-eabi-gcc</CC>
      <LD>arm-none-eabi-gcc</LD>
      <AS>arm-none-eabi-as</AS>
      <LKR_SCRIPT>stm32.ld</LKR_SCRIPT>
      <CFLAGS>-c -fno-common -ffreestanding -nostdlib -nostdinc -O0 -g -mcpu=cortex-m4 -mfpu=vfpv4-d16 -mthumb -I.</CFLAGS>
      <LFLAGS>-nostartfiles -nostdlib -nostdinc -g -T$(LKR_SCRIPT)</LFLAGS>
      <CPFLAGS>-Obinary</CPFLAGS>
      <C_SRC>SystemInit.c</C_SRC>
      <OBJS>startup.o SystemInit.o</OBJS>
      <ASFLAGS> -g -Wall -gdwarf-2 -mthumb -mcpu=cortex-m4 -mfpu=vfpv4-d16 </ASFLAGS>
    </variables>
    <targets>
      <target default="true">
        <source>$(OBJS) startup.o</source>
        <output>$(project).elf</output>
        <rule>$(LD) $(LFLAGS) -o $(project).elf $(OBJS)</rule>
      </target>
      <target>
        <source>startup.s</source>
        <output>startup.o</output>
        <rule>$(AS) -c $(ASFLAGS) -o startup.o startup.s</rule>
      </target>
      <target phony="true">
        <source>$(project).elf</source>
        <output>flash</output>
<!--
        # openocd
        openocd -f board/stm32f4discovery.cfg -c "program blinkyProject_stm32.elf verify reset exit"
        # oder
        openocd -f board/stm32f4discovery.cfg -c "program blinkyProject_stm32.bin exit 0x08000000"
-->
        <rule>arm-none-eabi-objcopy -O binary -S $(project).elf $(project).bin
        st-flash write $(project).bin 0x8000000</rule>
      </target>
    </targets>
  </required>
  <variables>
    <CP>arm-none-eabi-objcopy</CP>
  </variables>
</build_cfg>
